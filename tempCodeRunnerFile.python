import numpy as np

def lu_factorization(matrix):
    n = len(matrix)
    lower = np.zeros((n, n))
    upper = np.zeros((n, n))

    for i in range(n):
        lower[i][i] = 1

        for j in range(i, n):
            sum_val = sum(lower[j][k] * upper[k][i] for k in range(i))
            upper[i][j] = matrix[i][j] - sum_val

        for j in range(i + 1, n):
            sum_val = sum(lower[j][k] * upper[k][i] for k in range(i))
            lower[j][i] = (matrix[j][i] - sum_val) / upper[i][i]

    return lower, upper

# Example 3x3 matrix
matrix = np.array([[1, 1, 1],
                   [0, 0.001, 0.001],
                   [0, 0.001, 1]])

lower, upper = lu_factorization(matrix)

print("Original Matrix:")
print(matrix)
print("\nLower Triangular Matrix (L - with multipliers):")
print(lower)
print("\nUpper Triangular Matrix (U):")
print(upper)

